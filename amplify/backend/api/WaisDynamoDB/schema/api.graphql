type Query {
  #Utils
  me: ModelUserProfileConnection @function(name: "resolver-${env}") @auth(rules: [{ allow: private }, { allow: private, provider: iam }])

  user(username: String!): ModelUserProfileConnection
    @function(name: "resolver-${env}")
    @auth(rules: [{ allow: groups, groups: ["admin"] }, { allow: private, provider: iam }])

  echo(msg: String!): String @function(name: "resolver-${env}") @auth(rules: [{ allow: private }, { allow: private, provider: iam }])

  getOfficesIWorkIn(filter: ModelOfficeFilterInput, limit: Int, nextToken: String): ModelOfficeConnection
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")

  getMyUserCalendarEvents(filter: ModelUserCalendarEventFilterInput, limit: Int, nextToken: String): ModelUserCalendarEventConnection
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")

  getMySentRequests(filter: ModelRequestsFilterInput, limit: Int, nextToken: String): ModelRequestsConnection
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")

  getRequestsForMe(filter: ModelRequestsFilterInput, limit: Int, nextToken: String): ModelRequestsConnection
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")

  # Manager query
  getEmployeeUserProfiles(filter: ModelTradeUserConnectionFilterInput, limit: Int, nextToken: String): ModelUserProfileConnection
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")

  # Manager query
  getContractorUserProfiles(filter: ModelTradeUserConnectionFilterInput, limit: Int, nextToken: String): ModelUserProfileConnection
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")

  getCustomersForOfficeId(officeId: ID!, filter: ModelCustomerFilterInput, limit: Int, nextToken: String): ModelCustomerConnection
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")

  getContractsForOfficeId(officeId: ID!, filter: ModelContractFilterInput, limit: Int, nextToken: String): ModelContractConnection
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")

  getPartnerOfficeConnectionsForOfficeId(
    officeId: ID!
    filter: ModelCompanyAccessConnectionFilterInput
    limit: Int
    nextToken: String
  ): ModelCompanyAccessConnectionConnection
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
}

type Mutation {
  # # Create / Update / Delete from here
  # manageCustomers(action: CustomerResourceAction!, tradeName: String!, payload: String!): ID
  #   @function(name: "resolver-${env}")
  #   @auth(rules: [{ allow: private }])
  # manageContracts(action: ContractResourceAction!, tradeName: String!, payload: String!): ID
  #   @function(name: "resolver-${env}")
  #   @auth(rules: [{ allow: private }])
  # manageEmployees(action: EmployeeResourceAction!, tradeName: String!, payload: String!): ID
  #   @function(name: "resolver-${env}")
  #   @auth(rules: [{ allow: private }])
  # manageContractors(action: ContractorResourceAction!, tradeName: String!, payload: String!): ID
  #   @function(name: "resolver-${env}")
  #   @auth(rules: [{ allow: private }])

  # # Attempt to update fields in this object,
  # # 'typename' is the @model-Type as described in this file. Case sensitive. (eg. 'UserProfile')
  # # 'id' The entry ID.
  # # 'fields' is an array of dictionaries with attribute names as keys and attribute values with field values
  # # Output is just the ID of the target entry.
  # # EXAMPLE: Input  -> [{"logo": "s3://..." } , { "tin": "..." }]
  # #          Output -> {"id": "XXX-XXX"}
  # updateFields(typename: String!, id: ID!, fields: String): ID @function(name: "resolver-${env}") @auth(rules: [{ allow: private }])

  # # Request API
  # sendRequest(requestType: RequestType!, payload: String!): String @function(name: "resolver-${env}") @auth(rules: [{ allow: private }])
  # resolveRequest(id: ID!, payload: String!): String @function(name: "resolver-${env}") @auth(rules: [{ allow: private }])

  # ###########################################################################################################################################################################

  updateOfficeDetails(input: UpdateOfficeInput!, condition: ModelOfficeConditionInput): Office
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  updateUserProfileDetails(input: UpdateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfile
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  createVehicleForOffice(officeId: ID!, input: CreateVehicleInput!, condition: ModelVehicleConditionInput): Vehicle
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  updateVehicleForOffice(officeId: ID!, input: UpdateVehicleInput!, condition: ModelVehicleConditionInput): Vehicle
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  deleteVehicleForOffice(officeId: ID!, input: DeleteVehicleInput!, condition: ModelVehicleConditionInput): Vehicle
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  createContractForOffice(officeId: ID!, input: CreateContractInput!, condition: ModelContractConditionInput): Contract
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  updateContractForOffice(officeId: ID!, input: UpdateContractInput!, condition: ModelContractConditionInput): Contract
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  deleteContractForOffice(officeId: ID!, input: DeleteContractInput!, condition: ModelContractConditionInput): Contract
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  createCustomerForOffice(officeId: ID!, input: CreateCustomerInput!, condition: ModelCustomerConditionInput): Customer
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  updateCustomerForOffice(officeId: ID!, input: UpdateCustomerInput!, condition: ModelCustomerConditionInput): Customer
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  deleteCustomerForOffice(officeId: ID!, input: DeleteCustomerInput!, condition: ModelCustomerConditionInput): Customer
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  createRequest(input: CreateRequestsInput!, condition: ModelRequestsConditionInput): Requests
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  updateRequestsSentByMe(input: UpdateRequestsInput!, condition: ModelRequestsConditionInput): Requests
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  deleteRequestsSentByMe(input: DeleteRequestsInput!, condition: ModelRequestsConditionInput): Requests
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  createCompanyAccessConnectionForOffice(
    officeId: ID!
    input: CreateCompanyAccessConnectionInput!
    condition: ModelCompanyAccessConnectionConditionInput
  ): CompanyAccessConnection @auth(rules: [{ allow: private }, { allow: private, provider: iam }]) @function(name: "resolver-${env}")
  updateCompanyAccessConnectionForOffice(
    officeId: ID!
    input: UpdateCompanyAccessConnectionInput!
    condition: ModelCompanyAccessConnectionConditionInput
  ): CompanyAccessConnection @auth(rules: [{ allow: private }, { allow: private, provider: iam }]) @function(name: "resolver-${env}")
  deleteCompanyAccessConnectionForOffice(
    officeId: ID!
    input: DeleteCompanyAccessConnectionInput!
    condition: ModelCompanyAccessConnectionConditionInput
  ): CompanyAccessConnection @auth(rules: [{ allow: private }, { allow: private, provider: iam }]) @function(name: "resolver-${env}")
  createMyUserCalendarEvent(input: CreateUserCalendarEventInput!, condition: ModelUserCalendarEventConditionInput): UserCalendarEvent
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  updateMyUserCalendarEvents(input: UpdateUserCalendarEventInput!, condition: ModelUserCalendarEventConditionInput): UserCalendarEvent
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  deleteMyUserCalendarEvents(input: DeleteUserCalendarEventInput!, condition: ModelUserCalendarEventConditionInput): UserCalendarEvent
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  addEmployeeToOffice(officeId: ID!, empUsername: String!, permissions: AWSJSON!): ID
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  updateEmployeePermissionsForOffice(officeId: ID!, empUsername: String!, permissions: AWSJSON!): ID
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  deleteEmployeeForOffice(officeId: ID!, empUsername: String!): ID
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  addContractorToOffice(officeId: ID!, contractorUsername: String!, permissions: AWSJSON!): ID
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  updateContractorPermissionsForOffice(officeId: ID!, contractorUsername: String!, permissions: AWSJSON!): ID
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
  deleteContractorForOffice(officeId: ID!, contractorUsername: String!): ID
    @auth(rules: [{ allow: private }, { allow: private, provider: iam }])
    @function(name: "resolver-${env}")
}
