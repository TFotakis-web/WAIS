type Query {
    # UserProfile of caller
    me: UserProfileOutput @function(name: "resolver-${env}") @auth(rules: [{ allow: private }])

    # Utility that returns input string
    echo(msg: String!): String @function(name: "resolver-${env}") @auth(rules: [{ allow: private }])

    # Will fetch the Office the caller is part of along with its partners.
    getWorkEnvironment: OfficeUserConnectionOutput @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    # Calendar events of caller
    getMyUserCalendarEvents(
        filter: ModelUserCalendarEventFilterInput
        limit: Int
        nextToken: String
    ): ModelUserCalendarEventConnectionOutput @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    # Requests that sent BY the caller to someone else
    getMySentRequests(filter: ModelRequestsFilterInput, limit: Int, nextToken: String): ModelRequestsConnectionOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    # Requests that are sent from someone else TO the caller
    getRequestsForMe(filter: ModelRequestsFilterInput, limit: Int, nextToken: String): ModelRequestsConnectionOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    # Manager query, retrieves user profiles that are connected with an OUC to caller's office
    getEmployeeUserProfiles(filter: ModelOfficeUserConnectionFilterInput, limit: Int, nextToken: String): ModelUserProfileConnectionOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    # Manager query
    getContractorUserProfiles(
        filter: ModelOfficeUserConnectionFilterInput
        limit: Int
        nextToken: String
    ): ModelUserProfileConnectionOutput @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    getCustomersForOfficeId(officeId: ID!, filter: ModelCustomerFilterInput, limit: Int, nextToken: String): ModelCustomerConnectionOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    getContractsForOfficeId(officeId: ID!, filter: ModelContractFilterInput, limit: Int, nextToken: String): ModelCustomerConnectionOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    # Retrieve Insurance Companies. Consider filtering
    getInsuranceCompaniesOfMyOffice: [InsuranceCompany]! @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    getUserModelPermissionsForOffice(officeId: ID!): [ModelPermission!]!
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    getUserPagePermissionsForOffice(officeId: ID!): AWSJSON! @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    getUserRole: UserRole @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    ### ADMIN API ###
    getS3Object(obj: S3ObjectInput): S3ObjectContentsOutput @auth(rules: [{ allow: groups, groups: ["admin"] }]) @function(name: "resolver-${env}")

    getUserProfileByUsername(username: String): UserProfileOutput @auth(rules: [{ allow: groups, groups: ["admin"] }]) @function(name: "resolver-${env}")

    getInsuranceCompaniesOfOffice(officeId: ID!): [InsuranceCompany]! @auth(rules: [{ allow: groups, groups: ["admin"] }]) @function(name: "resolver-${env}")
}

type Mutation {
    updateOfficeDetails(input: UpdateOfficeInput!, condition: ModelOfficeConditionInput): OfficeOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    updateUserProfileDetails(input: UpdateUserProfileInput!, condition: ModelUserProfileConditionInput): UserProfileOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    createVehicleForOffice(officeId: ID!, input: CreateVehicleInput!, condition: ModelVehicleConditionInput): VehicleOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    updateVehicleForOffice(officeId: ID!, input: UpdateVehicleInput!, condition: ModelVehicleConditionInput): VehicleOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    deleteVehicleForOffice(officeId: ID!, input: DeleteVehicleInput!, condition: ModelVehicleConditionInput): VehicleOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    createContractForOffice(officeId: ID!, input: CreateContractInput!, condition: ModelContractConditionInput): ContractOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    updateContractForOffice(officeId: ID!, input: UpdateContractInput!, condition: ModelContractConditionInput): ContractOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    deleteContractForOffice(officeId: ID!, input: DeleteContractInput!, condition: ModelContractConditionInput): ContractOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    createCustomerForOffice(officeId: ID!, input: CreateCustomerInput!, condition: ModelCustomerConditionInput): CustomerOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    updateCustomerForOffice(officeId: ID!, input: UpdateCustomerInput!, condition: ModelCustomerConditionInput): CustomerOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    deleteCustomerForOffice(officeId: ID!, input: DeleteCustomerInput!, condition: ModelCustomerConditionInput): CustomerOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    # Requests API
    verifyOfficeRequest(message: String): RequestsOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    createInviteEmployeeToOfficeRequest(input: InviteEmployeeRequestPayloadInput!): RequestsOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    createInviteContractorToOfficeRequest(input: InviteContractorRequestPayloadInput!): RequestsOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    offerInsuranceCompanyToOfficeRequest(input: OfferInsuranceCompanyRequestPayloadInput!): RequestsOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    # Delete a single request with the provided ID
    deleteRequestsSentByMe(input: DeleteRequestsInput!, condition: ModelRequestsConditionInput): IDOutput!
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")
    resolveRequest(requestId: ID!, decision: RequestDecision!, payload: ResolveRequestPayloadInput): IDOutput!
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    createMyUserCalendarEvent(
        input: CreateUserCalendarEventInput!
        condition: ModelUserCalendarEventConditionInput
    ): UserCalendarEventOutput @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    updateMyUserCalendarEvents(
        input: UpdateUserCalendarEventInput!
        condition: ModelUserCalendarEventConditionInput
    ): UserCalendarEventOutput @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    deleteMyUserCalendarEvents(
        input: DeleteUserCalendarEventInput!
        condition: ModelUserCalendarEventConditionInput
    ): UserCalendarEventOutput @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    updateEmployeeModelPermissionsForOffice(officeId: ID!, empUsername: String!, modelPermissions: [ModelPermission]!): IDOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    updateEmployeePagePermissionsForOffice(officeId: ID!, empUsername: String!, pagePermissions: AWSJSON!): IDOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    deleteEmployeeForOffice(officeId: ID!, empUsername: String!): IDOutput @auth(rules: [{ allow: private }]) @function(name: "resolver-${env}")

    updateContractorModelPermissionsForOffice(officeId: ID!, contractorUsername: String!, modelPermissions: [ModelPermission]!): IDOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    updateContractorPagePermissionsForOffice(officeId: ID!, contractorUsername: String!, pagePermissions: AWSJSON!): IDOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    deleteContractorForOffice(officeId: ID!, contractorUsername: String!): IDOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    createUnverifiedOffice(input: CreateUnverifiedOfficePayloadInput!): IDOutput
    @auth(rules: [{ allow: private }])
    @function(name: "resolver-${env}")

    # ADMIN API
    addInsuranceCompaniesToOffice(officeId: ID!, insuranceCompanies: [InsuranceCompanyInput!]!): IDOutput
    @auth(rules: [{ allow: groups, groups: ["admin"] }])
    @function(name: "resolver-${env}")

    removeInsuranceCompaniesFromOffice(officeId: ID!, insuranceCompanyCodes: [String]!): IDOutput
    @auth(rules: [{ allow: groups, groups: ["admin"] }])
    @function(name: "resolver-${env}")
}