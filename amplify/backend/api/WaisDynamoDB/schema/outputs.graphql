type UserProfileOutput {
  id: ID
  username: String!
  email: String!
  telephone: String!
  surname: String
  name: String
  fathers_name: String
  address: String
  zip_code: String
  mobile: String
  tin: String
  family_name: String
  gender: String
  birthdate: AWSDate
  city: String
  profilePicture: S3Object
  preferences: AWSJSON
  locale: String
  files: [S3Object]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type OfficeOutput {
  id: ID
  tradeName: String!
  ownerUsername: String!
  address: String
  office_email: String!
  zip_code: String
  mobile: String
  phone: String!
  partnersNumberLimit: Int
  employeesNumberLimit: Int
  verified: Boolean
  tin: String!
  professionStartDate: AWSDate
  chamberRecordNumber: String
  insuranceLicenseExpirationDate: AWSDate
  civilLiabilityExpirationDate: AWSDate
  bankAccountInfo: AWSJSON
  files: [S3Object]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type VehicleOutput {
  id: ID
  numberPlate: String!
  officeId: ID!
  tradeName: String!
  color: String!
  manufacturer: String!
  model: String!
  vehicle_owner: String!
  trim: String!
  fuelType: String
  usage: String!
  displacement: Int!
  eurotax: Int!
  firstRegistrationDate: String!
  passengers: Int!
  purchaseDate: String!
  taxableHorsepower: Int!
  vin: String!
  value: Float!
  file: [S3Object]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ContractOutput {
  id: ID
  contractId: ID!
  version: Int!
  vehicleNumberPlate: String!
  vehicleId: ID!
  voucherId: String!
  customerId: String!
  tradeName: String!
  second_tradeId: String
  contractorId: String
  co_name: String
  co_TRN: String
  contractState: String!
  insuranceClass: String!
  insuranceCoverage: [String]
  insuranceUsage: String
  duration: String!
  startDate: String!
  endDate: String!
  data: String!
  discount: Float!
  jointWorth: Float!
  netWorth: Float!
  driversLicense: DriversLicense
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CustomerOutput {
  id: ID
  tin: String!
  tradeName: String!
  firstName: String
  lastName: String
  fathersName: String
  birthDate: String
  gender: String
  email: String!
  mobile: String
  postcode: String
  doy: String
  address: String
  familyStatus: String
  files: [S3Object]
  driversLicense: DriversLicense
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type TradeUserConnectionOutput {
  id: ID
  tradeId: ID!
  tradeName: String!
  userId: ID!
  username: String!
  pagePermissions: AWSJSON!
  modelPermissions: [ModelPermission!]!
  employeeType: EmployeeType!
  preferences: AWSJSON
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type TradeContractConnectionOutput {
  id: ID
  tradeId: ID!
  tradeName: String!
  contractId: ID!
  ownsContract: Boolean!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CompanyAccessConnectionOutput {
  id: ID
  fromId: ID!
  fromTradeName: String!
  toId: ID!
  toTradeName: String!
  expirationDate: AWSTimestamp!
  message: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserCalendarEventOutput {
  id: ID
  username: String!
  payload: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type TransactionHistoryOutput {
  id: ID
  senderUserProfileId: ID!
  receiverUserProfileId: ID!
  timestamp: AWSTimestamp!
  senderUsername: String!
  receiverUsername: String!
  transactionAmount: Float!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type RequestsOutput {
  id: ID
  senderUsername: String!
  senderEmail: String!
  receiverUsername: String!
  receiverEmail: String!
  type: RequestType!
  payload: CreateRequestPayload!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ModelOfficeConnectionOutput {
  items: [OfficeOutput]
  nextToken: String
}

type ModelUserCalendarEventConnectionOutput {
  items: [UserCalendarEventOutput]
  nextToken: String
}

type ModelRequestsConnectionOutput {
  items: [RequestsOutput]
  nextToken: String
}

type ModelUserProfileConnectionOutput {
  items: [UserProfileOutput]
  nextToken: String
}

type ModelCustomerConnectionOutput {
  items: [CustomerOutput]
  nextToken: String
}

type ModelCompanyAccessConnectionOutput {
  items: [CompanyAccessConnectionOutput]
  nextToken: String
}
