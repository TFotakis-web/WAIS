type InsuranceCompany {
    name: String!
    code: String!
}
type InsuranceCompanyDetails {
    id: ID
    officeName: String
    insuranceCompanies: [InsuranceCompany!]!
}
type S3Object {
    level: String!
    idToken: String!
    filePath: String!
    filename: String!
    contentType: String!
}

enum EmployeeType {
    STANDARD
    CONTRACTOR
    MANAGER
}

enum UserRole {
    EMPLOYEE
    CONTRACTOR
    MANAGER
    UNKNOWN
}

type DriversLicense {
    LicenseID: Int
    DriversLicenseType: String
    Category: [DriversLicenseCategory]
}

type DriversLicenseCategory {
    category: String
    issueDate: String
    expiresAt: String
}

type InsurancePackage {
    name: String!
    insuranceClass: String!
    coverage: [String]
    usages: String
}

enum RequestType {
    CREATE_OFFICE
    CREATE_OFFICE_CONNECTION
    INVITE_EMPLOYEE_TO_OFFICE
    INVITE_CONTRACTOR_TO_OFFICE
}

enum ModelPermission {
    OFFICE_INFO_QUERY
    OFFICE_INFO_MUTATE
    VEHICLES_QUERY
    VEHICLES_MUTATE
    CONTRACTS_QUERY
    CONTRACTS_MUTATE
    CUSTOMERS_QUERY
    CUSTOMERS_MUTATE
    EMPLOYEE_ADD
    EMPLOYEE_REMOVE
    CONTRACTOR_ADD
    CONTRACTOR_REMOVE
    OFFICE_CONN_CREATE
    OFFICE_CONN_DELETE
}

enum RequestDecision {
    ACCEPT
    REJECT
}

### Create Request

type CreateRequestPayload {
    createOfficePayload: CreateOfficeRequestPayload
    createOfficeConnectionPayload: OfficeConnectionRequestPayload
    inviteEmployeeToOfficePayload: InviteEmployeeRequestPayload
    inviteContractorToOfficePayload: InviteContractorRequestPayload
}
type CreateOfficeRequestPayload {
    officeName: String!
    address: String
    office_email: String!
    zip_code: String
    mobile: String
    phone: String!
    tin: String!
    professionStartDate: AWSDate
    chamberRecordNumber: String
    insuranceLicenseExpirationDate: AWSDate
    civilLiabilityExpirationDate: AWSDate
    comments: String
    insuranceCompanies: [InsuranceCompany!]!
    files: [S3Object]
}

type OfficeConnectionRequestPayload {
    manager_email: String!
}

type InviteEmployeeRequestPayload {
    email: String!
    empModelPermissions: [ModelPermission!]!
    empPagePermissions: AWSJSON!
}

type InviteContractorRequestPayload {
    ctrModelPermissions: [ModelPermission!]!
    ctrPagePermissions: AWSJSON!
    email: String!
}

## Resolve request
input ResolveRequestPayloadInput {
    createOfficePayload: ResolveCreateOfficePayload
    createOfficeConnectionPayload: ResolveOfficeAccessConnectionPayload
    inviteEmployeeToOfficePayload: ResolveInviteEmployeePayload
    inviteContractorToOfficePayload: ResolveInviteContractorPayload
}

input ResolveCreateOfficePayload {
    managerModelPermissions: [ModelPermission!]!
    managerPagePermissions: AWSJSON!
    partnersNumberLimit: Int!
    employeesNumberLimit: Int!
}
input ResolveOfficeAccessConnectionPayload {
    expirationDate: AWSTimestamp!
}
input ResolveInviteEmployeePayload {
    body: String #Ignored
}
input ResolveInviteContractorPayload {
    body: String #Ignored
}
