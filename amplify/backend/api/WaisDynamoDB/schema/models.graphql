# Each office has one owner and each owner hast one office, always!
type Office
@model(subscriptions: null)
@auth(rules: [{ allow: private, provider: iam }])
@key(name: "byOfficeName", fields: ["officeName", "ownerUsername"], queryField: "listOfficeByName")
@key(name: "byOfficeEmail", fields: ["office_email"], queryField: "listOfficeByOfficeEmail")
@key(name: "byOwnerUsername", fields: ["ownerUsername", "officeName"], queryField: "listOfficeByOwnerUsername") {
    # UID of this office
    id: ID

    # Protected info
    officeName: String!
    ownerUsername: String!
    address: String
    office_email: String!
    zip_code: String
    mobile: String
    phone: String!
    partnersNumberLimit: Int
    employeesNumberLimit: Int
    verified: Boolean

    ## Private data
    # Consider making this a connection if there is a need to search for an office based on such data.
    tin: String!
    professionStartDate: AWSDate
    chamberRecordNumber: String
    insuranceLicenseExpirationDate: AWSDate
    civilLiabilityExpirationDate: AWSDate
    bankAccountInfo: AWSJSON
    subscriptionExpirationDate: AWSDate
    office_logo: S3Object

    # Store S3 files in this field
    files: [S3Object]

    # Insurance companies given by an Admin
    ownedInsuranceCompanies: [InsuranceCompany]!
    allInsuranceCompanies: [InsuranceCompany] @function(name: "resolver-${env}") # Owned,Incoming,Outgoing

    # Access to connected offices
    outgoingOfficeConnections: [OfficeCollaborationConnection] @connection(keyName: "byFromOfficeName", fields: ["officeName"])
    incomingOfficeConnections: [OfficeCollaborationConnection] @connection(keyName: "byToOfficeName", fields: ["officeName"])

    # Customers of this Office, does not include office connection customers, use the customers protected resolver for this
    officeCustomers: [Customer] @connection(keyName: "byOfficeName", fields: ["officeName"])

    # Contracts of this Office, does not include office connection contracts, use the customers protected resolver for this
    officeContracts: [Contract] @connection(keyName: "byOfficeName", fields: ["officeName"])

    # Employees and contractors of this Office
    workforce: [OfficeUserConnection] @connection(keyName: "byOfficeName", fields: ["officeName"])
}

type UserProfile
@model(subscriptions: null)
@auth(rules: [{ allow: private, provider: iam }])
@key(name: "byEmail", fields: ["email"], queryField: "listUserProfileByEmail")
@key(name: "byUsername", fields: ["username"], queryField: "listUserProfileByUsername") {
    #Currently the user's username, guaranteed to always be unique
    id: ID

    # Get these on signup via trigger
    username: String!
    email: String!
    telephone: String!
    role: UserRole!

    # Fill this AFTER login
    name: String
    fathers_name: String
    address: String
    zip_code: String
    mobile: String
    tin: String

    family_name: String
    gender: String
    birthdate: AWSDate
    city: String
    profilePicture: S3Object
    preferences: AWSJSON
    locale: String

    # Store S3 files in this field
    files: [S3Object]

    # Access to working Office, null if no invites/creations have taken place
    officeConnId: ID
    officeConnection: OfficeUserConnection @connection(fields: ["officeConnId"])

    # Access to requests
    requestsSentByMe: [Requests] @connection(keyName: "bySenderEmail", fields: ["email"])
    requestsForMe: [Requests] @connection(keyName: "byReceiverEmail", fields: ["email"])

    # Get all calendar events
    calendarEvents: [UserCalendarEvent] @connection(keyName: "byUsername", fields: ["username"])
}

type OfficeUserConnection
@model(subscriptions: null)
@key(name: "byOfficeName", fields: ["officeName", "userId"], queryField: "listOfficeUserConnectionsByOfficeName")
@key(name: "byEmployeeType", fields: ["employeeType", "username", "officeName"], queryField: "listOfficeUserConnectionsByEmployeeType")
@key(name: "byUserId", fields: ["userId", "officeName"], queryField: "listOfficeUserConnectionsByUserId")
@key(name: "byOfficeAndUser", fields: ["officeName", "username"], queryField: "listOfficeUserConnectionsByOfficeAndUser")
@key(name: "byOfficeUsername", fields: ["username", "officeName"], queryField: "listOfficeUserConnectionsByUsername")
@auth(rules: [{ allow: private, provider: iam }]) {
    id: ID
    officeId: ID!
    officeName: String!
    userId: ID!
    username: String!
    office: Office! @connection(fields: ["officeId"])
    user: UserProfile! @connection(fields: ["userId"])
    pagePermissions: AWSJSON!
    modelPermissions: [ModelPermission!]!
    employeeType: EmployeeType! # e.g Contractor
    preferences: AWSJSON
}

# 1-way connection between 2 Offices.
# Only the sender 'pays' for the collaboration.
type OfficeCollaborationConnection
@model(subscriptions: null)
@key(name: "byFromId", fields: ["fromId", "toId"], queryField: "listOfficeCollaborationConnectionByFromOfficeId")
@key(name: "byFromOfficeName", fields: ["fromOfficeName", "toOfficeName"], queryField: "listOfficeCollaborationConnectionByFromOfficeName")
@key(name: "byToOfficeName", fields: ["toOfficeName", "fromOfficeName"], queryField: "listOfficeCollaborationConnectionByToOfficeName")
@auth(rules: [{ allow: private, provider: iam }]) {
    id: ID
    fromId: ID!
    fromOfficeName: String!
    toId: ID!
    toOfficeName: String!
    sharedInsuranceCompanies: AWSJSON! # Levels are: insuranceCompanyCode->InsuranceCompany
    from: Office! @connection(fields: ["fromId"]) #This office initiates the collaboration
    to: Office! @connection(fields: ["toId"]) #This office needs to accept the collaboration
    expirationDate: AWSTimestamp # Can be used to configure a TTL workflow
    message: String
}

type Requests
@model(subscriptions: null)
@key(name: "bySenderEmail", fields: ["senderEmail"], queryField: "listRequestsBySenderEmail")
@key(name: "byReceiverEmail", fields: ["receiverEmail"], queryField: "listRequestsByReceiverEmail")
@key(name: "bySenderUsername", fields: ["senderUsername"], queryField: "listRequestsBySenderUsername")
@key(name: "byType", fields: ["type"], queryField: "listRequestsByType")
@auth(rules: [{ allow: private, provider: iam }]) {
    id: ID
    senderUsername: String!
    senderEmail: String!
    receiverEmail: String!
    type: RequestType!
    payload: CreateRequestPayload!
}

type Events
@model(subscriptions: null)
@auth(rules: [{ allow: private, provider: iam }]) {
    id: ID
    payload: String!
}

type UserNotifications
@model(subscriptions: null)
@key(name: "byUsernameAndUpdatedAt", fields: ["username", "updatedAt"], queryField: "listUserNotificationsByUsernameAndUpdatedAt")
@auth(rules: [{ allow: private, provider: iam }]) {
    id: ID
    username: String
    payload: String
    notificationType: String
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
}

#For calendar use
type UserCalendarEvent
@model(subscriptions: null)
@key(name: "byUsername", fields: ["username", "createdAt"], queryField: "listUserCalendarEventsByUsername")
@auth(rules: [{ allow: private, provider: iam }]) {
    id: ID
    username: String # Populated server-side
    payload: String
    createdAt: AWSDateTime!
}

################################################ FOR LATER ON ################################################

type Vehicle
@model(subscriptions: null)
@auth(rules: [{ allow: private, provider: iam }])
@key(name: "byOfficeName", fields: ["officeName", "numberPlate"], queryField: "listVehiclesByOfficeName")
@key(name: "byVehicleOwner", fields: ["vehicle_owner", "officeName"], queryField: "listVehiclesByOwner") {
    id: ID
    numberPlate: String!
    officeId: ID!
    officeName: String!
    color: String!
    manufacturer: String!
    model: String!
    vehicle_owner: String!
    trim: String!
    fuelType: String
    usage: String!
    displacement: Int!
    eurotax: Int!
    firstRegistrationDate: String!
    passengers: Int!
    purchaseDate: String!
    taxableHorsepower: Int!
    vin: String!
    value: Float!
    file: [S3Object]
}

type Contract
@model(subscriptions: null)
@auth(rules: [{ allow: private, provider: iam }])
@key(name: "byOfficeName", fields: ["officeName", "createdAt"], queryField: "listContractsByOfficeName")
@key(name: "byVehicleNumberPlate", fields: ["vehicleNumberPlate", "officeName"], queryField: "listContractsByVehicleNumberPlates")
@key(name: "byCustomerId", fields: ["customerId", "officeName"], queryField: "listContractsByCustomerId") {
    id: ID
    contractId: ID! # Not unique, remember that we keep a history of each contract
    version: Int! # For history
    vehicleNumberPlate: String!
    vehicleId: ID!
    voucherId: String!
    customerId: String!
    officeName: String!
    second_officeId: String #Optional
    contractorId: String #Optional
    co_name: String # CoSign participant name (OPTIONAL)
    co_TRN: String # CoSign participant "AFM" (OPTIONAL)
    contractState: String! # Send to S3 on completion
    insuranceCompanyName: String!
    insuranceCompanyCode: String!
    insuranceClass: String!
    insuranceCoverage: [String]
    insuranceUsage: String
    duration: String!
    startDate: String!
    endDate: String!
    data: String!
    discount: Float! # e.g. 0.1
    jointWorth: Float!
    netWorth: Float!
    driversLicense: DriversLicense
    createdAt: AWSDateTime!
    vehicle: Vehicle @connection(fields: ["vehicleId"])
}

type Customer
@model(subscriptions: null)
@auth(rules: [{ allow: private, provider: iam }])
@key(name: "byOfficeName", fields: ["officeName", "firstName", "lastName"], queryField: "listCustomersByOfficeName") {
    id: ID
    tin: String!
    officeName: String!
    firstName: String
    lastName: String
    fathersName: String
    birthDate: String
    gender: String
    email: String!
    mobile: String
    zip_code: String
    doy: String
    address: String
    familyStatus: String
    files: [S3Object]
    driversLicense: DriversLicense
}

type TransactionHistory
@model(subscriptions: null)
@key(
    name: "bySenderUsername"
    fields: ["senderUsername", "timestamp", "receiverUsername"]
    queryField: "listTransactionHistorybySenderUsername"
)
@key(
    name: "byReceiverUsername"
    fields: ["receiverUsername", "timestamp", "senderUsername"]
    queryField: "listTransactionHistorybyReceiverUsername"
)
@auth(rules: [{ allow: private, provider: iam }]) {
    id: ID
    senderUserProfileId: ID!
    receiverUserProfileId: ID!
    timestamp: AWSTimestamp!
    senderUsername: String! # UserProfile ID
    receiverUsername: String!
    transactionAmount: Float!
    sender: UserProfile! @connection(fields: ["senderUserProfileId"])
    receiver: UserProfile! @connection(fields: ["receiverUserProfileId"])
}

type OfficeContractConnection
@model(subscriptions: null)
@key(name: "byOfficeId", fields: ["officeId", "officeName"], queryField: "listOfficeContractConnectionByOfficeId")
@key(name: "byOfficeName", fields: ["officeName", "officeId"], queryField: "listOfficeContractConnectionByOfficeName")
@key(name: "byContractId", fields: ["contractId", "officeId"], queryField: "listOfficeContractConnectionByContractId")
@auth(rules: [{ allow: private, provider: iam }]) {
    id: ID
    officeId: ID!
    officeName: String!
    contractId: ID!
    office: Office! @connection(fields: ["officeId"])
    contract: Contract! @connection(fields: ["contractId"])
    ownsContract: Boolean! #If true then the Office can edit the Contract
}