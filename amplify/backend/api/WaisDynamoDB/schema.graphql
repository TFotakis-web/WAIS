# type Task
#   @model
#   @auth(
#     rules: [
#       { allow: groups, groups: ["Managers"], queries: null, mutations: [create, update, delete] }
#       { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
#     ]
#   ) {
#   id: ID!
#   title: String!
#   description: String
#   status: String
# }
# type PrivateNote @model @auth(rules: [{ allow: owner }]) {
#   id: ID!
#   content: String!
# }

type Trade @model {
	id: String!
	name: String!
	info: String
	postcode: String
	tin: String
	logo: AWSURL
	companyAccess: [CompanyAccess]
	owner: ID # UserID
	employees: [ID] # UserID
	contractors: [ID] # UserID
	customers: [Customer]
	contracts: [Contract]
	#permissions..
}

type CompanyAccess {
	companyName: String!
	from: String! #decide on null/empty value
	expirationDate: AWSDate
	active: Boolean
	info: String!
}

type Customer {
	id: ID!
	tin: Int
	name: String
	surname: String
	fathersName: String
	birthDate: AWSDate
	gender: String
	email: AWSEmail
	mobile: AWSPhone
	postcode: String
	doy: String
	address: String
	familyStatus: String
	creationDate: AWSDateTime
	files: [File]
	driversLicense: DriversLicense
}

# consider id
type File  {
	name: String
	url: AWSURL
}

type Contract {
	id: ID!
	customer: Customer!
	contractId: ID!
	voucherID: Int!
	contractState: String! # Send to S3 on completion
	tradeAdmin: String! #Aftos poy kanei amesa to insurance
	assignee: String! #Aftos poy kanei emesa to insurance
	partner: String!
	company: String!
	insuranceClass: String!
	insuranceCoverage: [String]
	insuranceUsage: String
	vehicle: Vehicle!
	duration: String!
	creationDate: String!
	startDate: AWSDate!
	endDate: AWSDate!
	data: String!
	discount: Float! # e.g. 0.1
	jointWorth: Float!
	netWorth: Float!
	driversLicense: DriversLicense
}

type DriversLicense {
	LicenseID: Int
	DriversLicenseType: String # Erasitexniko/Epaggelmatiko
	Category: [DriversLicenseCategory]
}

type DriversLicenseCategory {
	category: String
	issueDate: AWSDate
	expiresAt: AWSDate
}

type Vehicle @model {
	id: ID!
	numberPlate: String!
	color: String!
	manufacturer: String!
	model: String!
	owner: String!
	trim: String!
	fuelType: String
	usage: String!
	displacement: Int!
	eurotax: Int!
	firstRegistrationDate: AWSDate!
	passengers: Int!
	purchaseDate: AWSDate!
	taxableHorsepower: Int!
	vin: String!
	value: Float!
	file: [File]
	# SecurityMeasure
}

type InsurancePackage {
	name: String!
	insuranceClass: String!
	coverage: [String]
	usages: String
}

type UserCognito {
	id: ID! # Custom attribute
	name: String! # Full Name (includes middle name)
	given_name: String! # First name
	family_name: String! # Surname
	middle_name: String! # Father's name!
	preferred_username: String!
	picture: String!
	email: String!
	email_verified: Boolean!
	gender: String!
	birthdate: String!
	locale: String!
	phone_number: String!
	phone_number_verified: Boolean!
	address: AWSJSON! # Specific json, check https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
	updated_at: AWSDateTime!
}

type UserProfile @model {
	userID: ID!
	permissions: [UserPermissions]
	preferences: AWSJSON
	telephone: AWSPhone
	tin: Int!
	doy: String!
	familyStatus: String!
	creationDate: AWSDate!
	chamberRecordNumber: String!
	insuranceLicenseExpirationDate: AWSDate!
	partnersNumberLimit: Int!
	professionStartDate: AWSDate!
	message: String!
	valid: Boolean!
	file: [File]
}

type UserPermissions {
	department: String #User defined
	read: Boolean
	write: Boolean
}
